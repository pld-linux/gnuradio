--- gnuradio-3.8.0.0/gnuradio-runtime/lib/block.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gnuradio-runtime/lib/block.cc	2020-07-30 19:53:36.944956519 +0200
@@ -61,7 +61,7 @@
 {
     global_block_registry.register_primitive(alias(), this);
     message_port_register_in(d_system_port);
-    set_msg_handler(d_system_port, boost::bind(&block::system_handler, this, _1));
+    set_msg_handler(d_system_port, boost::bind(&block::system_handler, this, boost::placeholders::_1));
 
     configure_default_loggers(d_logger, d_debug_logger, symbol_name());
 }
--- gnuradio-3.8.0.0/gr-blocks/lib/mute_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/mute_impl.cc	2020-07-30 20:01:57.627851457 +0200
@@ -47,7 +47,7 @@
 {
     this->message_port_register_in(pmt::intern("set_mute"));
     this->set_msg_handler(pmt::intern("set_mute"),
-                          boost::bind(&mute_impl<T>::set_mute_pmt, this, _1));
+                          boost::bind(&mute_impl<T>::set_mute_pmt, this, boost::placeholders::_1));
 }
 
 template <class T>
--- gnuradio-3.8.0.0/gr-blocks/lib/wavfile.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/wavfile.cc	2020-07-30 20:11:47.698777860 +0200
@@ -26,7 +26,7 @@
 
 #include <gnuradio/blocks/wavfile.h>
 #include <stdint.h>
-#include <boost/detail/endian.hpp> //BOOST_BIG_ENDIAN
+#include <boost/predef/other/endian.h>
 #include <cstring>
 
 namespace gr {
@@ -35,7 +35,7 @@
 
 // Basically, this is the opposite of htonx() and ntohx()
 // Define host to/from worknet (little endian) short and long
-#ifdef BOOST_BIG_ENDIAN
+#if BOOST_ENDIAN_BIG_BYTE
 
 static inline uint16_t __gri_wav_bs16(uint16_t x) { return (x >> 8) | (x << 8); }
 
@@ -57,7 +57,7 @@
 #define htows(x) uint16_t(x)
 #define wtohs(x) uint16_t(x)
 
-#endif // BOOST_BIG_ENDIAN
+#endif // BOOST_ENDIAN_BIG_BYTE
 
 // WAV files are always little-endian, so we need some byte switching macros
 static inline uint32_t host_to_wav(uint32_t x) { return htowl(x); }
--- gnuradio-3.8.0.0/gr-blocks/lib/copy_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/copy_impl.cc	2020-07-30 20:14:40.057820267 +0200
@@ -44,7 +44,7 @@
       d_enabled(true)
 {
     message_port_register_in(pmt::mp("en"));
-    set_msg_handler(pmt::mp("en"), boost::bind(&copy_impl::handle_enable, this, _1));
+    set_msg_handler(pmt::mp("en"), boost::bind(&copy_impl::handle_enable, this, boost::placeholders::_1));
 }
 
 copy_impl::~copy_impl() {}
--- gnuradio-3.8.0.0/gr-blocks/lib/message_debug_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/message_debug_impl.cc	2020-07-30 20:19:32.656506428 +0200
@@ -90,14 +90,14 @@
     : block("message_debug", io_signature::make(0, 0, 0), io_signature::make(0, 0, 0))
 {
     message_port_register_in(pmt::mp("print"));
-    set_msg_handler(pmt::mp("print"), boost::bind(&message_debug_impl::print, this, _1));
+    set_msg_handler(pmt::mp("print"), boost::bind(&message_debug_impl::print, this, boost::placeholders::_1));
 
     message_port_register_in(pmt::mp("store"));
-    set_msg_handler(pmt::mp("store"), boost::bind(&message_debug_impl::store, this, _1));
+    set_msg_handler(pmt::mp("store"), boost::bind(&message_debug_impl::store, this, boost::placeholders::_1));
 
     message_port_register_in(pmt::mp("print_pdu"));
     set_msg_handler(pmt::mp("print_pdu"),
-                    boost::bind(&message_debug_impl::print_pdu, this, _1));
+                    boost::bind(&message_debug_impl::print_pdu, this, boost::placeholders::_1));
 }
 
 message_debug_impl::~message_debug_impl() {}
--- gnuradio-3.8.0.0/gr-blocks/lib/message_strobe_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/message_strobe_impl.cc	2020-07-30 20:20:10.985184522 +0200
@@ -54,7 +54,7 @@
 
     message_port_register_in(pmt::mp("set_msg"));
     set_msg_handler(pmt::mp("set_msg"),
-                    boost::bind(&message_strobe_impl::set_msg, this, _1));
+                    boost::bind(&message_strobe_impl::set_msg, this, boost::placeholders::_1));
 }
 
 message_strobe_impl::~message_strobe_impl() {}
--- gnuradio-3.8.0.0/gr-blocks/lib/message_strobe_random_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/message_strobe_random_impl.cc	2020-07-30 20:20:36.996549557 +0200
@@ -75,7 +75,7 @@
 
     message_port_register_in(pmt::mp("set_msg"));
     set_msg_handler(pmt::mp("set_msg"),
-                    boost::bind(&message_strobe_random_impl::set_msg, this, _1));
+                    boost::bind(&message_strobe_random_impl::set_msg, this, boost::placeholders::_1));
 }
 
 long message_strobe_random_impl::next_delay()
--- gnuradio-3.8.0.0/gr-blocks/lib/multiply_matrix_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/multiply_matrix_impl.cc	2020-07-30 20:21:18.782075727 +0200
@@ -237,7 +237,7 @@
     message_port_register_in(port_name);
     set_msg_handler(
         port_name,
-        boost::bind(&multiply_matrix_impl<gr_complex>::msg_handler_A, this, _1));
+        boost::bind(&multiply_matrix_impl<gr_complex>::msg_handler_A, this, boost::placeholders::_1));
 }
 
 template <>
@@ -257,7 +257,7 @@
     pmt::pmt_t port_name = pmt::string_to_symbol("set_A");
     message_port_register_in(port_name);
     set_msg_handler(port_name,
-                    boost::bind(&multiply_matrix_impl<float>::msg_handler_A, this, _1));
+                    boost::bind(&multiply_matrix_impl<float>::msg_handler_A, this, boost::placeholders::_1));
 }
 
 
--- gnuradio-3.8.0.0/gr-blocks/lib/pdu_filter_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/pdu_filter_impl.cc	2020-07-30 20:22:34.176032280 +0200
@@ -45,7 +45,7 @@
     message_port_register_out(pdu::pdu_port_id());
     message_port_register_in(pdu::pdu_port_id());
     set_msg_handler(pdu::pdu_port_id(),
-                    boost::bind(&pdu_filter_impl::handle_msg, this, _1));
+                    boost::bind(&pdu_filter_impl::handle_msg, this, boost::placeholders::_1));
 }
 
 void pdu_filter_impl::handle_msg(pmt::pmt_t pdu)
--- gnuradio-3.8.0.0/gr-blocks/lib/pdu_set_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/pdu_set_impl.cc	2020-07-30 20:25:04.957278370 +0200
@@ -43,7 +43,7 @@
 {
     message_port_register_out(pdu::pdu_port_id());
     message_port_register_in(pdu::pdu_port_id());
-    set_msg_handler(pdu::pdu_port_id(), boost::bind(&pdu_set_impl::handle_msg, this, _1));
+    set_msg_handler(pdu::pdu_port_id(), boost::bind(&pdu_set_impl::handle_msg, this, boost::placeholders::_1));
 }
 
 void pdu_set_impl::handle_msg(pmt::pmt_t pdu)
--- gnuradio-3.8.0.0/gr-blocks/lib/pdu_remove_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/pdu_remove_impl.cc	2020-07-30 20:25:43.595972568 +0200
@@ -43,7 +43,7 @@
     message_port_register_out(pdu::pdu_port_id());
     message_port_register_in(pdu::pdu_port_id());
     set_msg_handler(pdu::pdu_port_id(),
-                    boost::bind(&pdu_remove_impl::handle_msg, this, _1));
+                    boost::bind(&pdu_remove_impl::handle_msg, this, boost::placeholders::_1));
 }
 
 void pdu_remove_impl::handle_msg(pmt::pmt_t pdu)
--- gnuradio-3.8.0.0/gr-blocks/lib/random_pdu_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/random_pdu_impl.cc	2020-07-30 20:54:28.889831075 +0200
@@ -53,7 +53,7 @@
     message_port_register_out(pdu::pdu_port_id());
     message_port_register_in(pmt::mp("generate"));
     set_msg_handler(pmt::mp("generate"),
-                    boost::bind(&random_pdu_impl::generate_pdu, this, _1));
+                    boost::bind(&random_pdu_impl::generate_pdu, this, boost::placeholders::_1));
     if (length_modulo < 1)
         throw std::runtime_error("length_module must be >= 1");
     if (max_items < length_modulo)
--- gnuradio-3.8.0.0/gr-blocks/lib/repeat_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/repeat_impl.cc	2020-07-30 20:57:03.084578109 +0200
@@ -45,7 +45,7 @@
 {
     message_port_register_in(pmt::mp("interpolation"));
     set_msg_handler(pmt::mp("interpolation"),
-                    boost::bind(&repeat_impl::msg_set_interpolation, this, _1));
+                    boost::bind(&repeat_impl::msg_set_interpolation, this, boost::placeholders::_1));
 }
 
 void repeat_impl::msg_set_interpolation(pmt::pmt_t msg)
--- gnuradio-3.8.0.0/gr-blocks/lib/socket_pdu_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/socket_pdu_impl.cc	2020-07-30 21:08:44.014634418 +0200
@@ -101,7 +101,7 @@
         start_tcp_accept();
 
         set_msg_handler(pdu::pdu_port_id(),
-                        boost::bind(&socket_pdu_impl::tcp_server_send, this, _1));
+                        boost::bind(&socket_pdu_impl::tcp_server_send, this, boost::placeholders::_1));
     } else if (type == "TCP_CLIENT") {
         boost::system::error_code error = boost::asio::error::host_not_found;
         d_tcp_socket.reset(new boost::asio::ip::tcp::socket(d_io_service));
@@ -111,7 +111,7 @@
         d_tcp_socket->set_option(boost::asio::ip::tcp::no_delay(d_tcp_no_delay));
 
         set_msg_handler(pdu::pdu_port_id(),
-                        boost::bind(&socket_pdu_impl::tcp_client_send, this, _1));
+                        boost::bind(&socket_pdu_impl::tcp_client_send, this, boost::placeholders::_1));
 
         d_tcp_socket->async_read_some(
             boost::asio::buffer(d_rxbuf),
@@ -131,7 +131,7 @@
                         boost::asio::placeholders::bytes_transferred));
 
         set_msg_handler(pdu::pdu_port_id(),
-                        boost::bind(&socket_pdu_impl::udp_send, this, _1));
+                        boost::bind(&socket_pdu_impl::udp_send, this, boost::placeholders::_1));
     } else if (type == "UDP_CLIENT") {
         d_udp_socket.reset(
             new boost::asio::ip::udp::socket(d_io_service, d_udp_endpoint));
@@ -144,7 +144,7 @@
                         boost::asio::placeholders::bytes_transferred));
 
         set_msg_handler(pdu::pdu_port_id(),
-                        boost::bind(&socket_pdu_impl::udp_send, this, _1));
+                        boost::bind(&socket_pdu_impl::udp_send, this, boost::placeholders::_1));
     } else
         throw std::runtime_error("gr::blocks:socket_pdu: unknown socket type");
 
--- gnuradio-3.8.0.0/gr-blocks/lib/tagged_stream_multiply_length_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/tagged_stream_multiply_length_impl.cc	2020-07-30 21:10:41.004095833 +0200
@@ -51,7 +51,7 @@
     message_port_register_in(pmt::intern("set_scalar"));
     set_msg_handler(
         pmt::intern("set_scalar"),
-        boost::bind(&tagged_stream_multiply_length_impl::set_scalar_pmt, this, _1));
+        boost::bind(&tagged_stream_multiply_length_impl::set_scalar_pmt, this, boost::placeholders::_1));
 }
 
 tagged_stream_multiply_length_impl::~tagged_stream_multiply_length_impl() {}
--- gnuradio-3.8.0.0/gr-blocks/lib/tuntap_pdu_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-blocks/lib/tuntap_pdu_impl.cc	2020-07-30 21:17:07.857693002 +0200
@@ -96,7 +96,7 @@
 
     // set up input message port
     message_port_register_in(pdu::pdu_port_id());
-    set_msg_handler(pdu::pdu_port_id(), boost::bind(&tuntap_pdu_impl::send, this, _1));
+    set_msg_handler(pdu::pdu_port_id(), boost::bind(&tuntap_pdu_impl::send, this, boost::placeholders::_1));
 }
 
 int tuntap_pdu_impl::tun_alloc(char* dev, int flags)
--- gnuradio-3.8.0.0/gr-fec/lib/async_decoder_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-fec/lib/async_decoder_impl.cc	2020-07-30 21:35:53.983351061 +0200
@@ -65,10 +65,10 @@
     if (d_packed) {
         d_pack = new blocks::kernel::pack_k_bits(8);
         set_msg_handler(d_in_port,
-                        boost::bind(&async_decoder_impl::decode_packed, this, _1));
+                        boost::bind(&async_decoder_impl::decode_packed, this, boost::placeholders::_1));
     } else {
         set_msg_handler(d_in_port,
-                        boost::bind(&async_decoder_impl::decode_unpacked, this, _1));
+                        boost::bind(&async_decoder_impl::decode_unpacked, this, boost::placeholders::_1));
     }
 
     // The maximum frame size is set by the initial frame size of the decoder.
--- gnuradio-3.8.0.0/gr-fec/lib/async_encoder_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-fec/lib/async_encoder_impl.cc	2020-07-30 21:36:23.424894221 +0200
@@ -64,7 +64,7 @@
 
     if (d_packed) {
         set_msg_handler(d_in_port,
-                        boost::bind(&async_encoder_impl::encode_packed, this, _1));
+                        boost::bind(&async_encoder_impl::encode_packed, this, boost::placeholders::_1));
 
         d_unpack = new blocks::kernel::unpack_k_bits(8);
 
@@ -74,7 +74,7 @@
 
     } else {
         set_msg_handler(d_in_port,
-                        boost::bind(&async_encoder_impl::encode_unpacked, this, _1));
+                        boost::bind(&async_encoder_impl::encode_unpacked, this, boost::placeholders::_1));
     }
 
     if (d_packed || (strncmp(d_encoder->get_input_conversion(), "pack", 4) == 0)) {
--- gnuradio-3.8.0.0/gr-filter/lib/freq_xlating_fir_filter_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-filter/lib/freq_xlating_fir_filter_impl.cc	2020-07-30 21:45:00.281985689 +0200
@@ -72,7 +72,7 @@
         boost::bind(
             &freq_xlating_fir_filter_impl<IN_T, OUT_T, TAP_T>::handle_set_center_freq,
             this,
-            _1));
+            boost::placeholders::_1));
 }
 
 template <class IN_T, class OUT_T, class TAP_T>
--- gnuradio-3.8.0.0/gr-filter/lib/mmse_resampler_ff_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-filter/lib/mmse_resampler_ff_impl.cc	2020-07-30 21:46:30.340039944 +0200
@@ -54,7 +54,7 @@
 
     message_port_register_in(pmt::intern("msg_in"));
     set_msg_handler(pmt::intern("msg_in"),
-                    boost::bind(&mmse_resampler_ff_impl::handle_msg, this, _1));
+                    boost::bind(&mmse_resampler_ff_impl::handle_msg, this, boost::placeholders::_1));
 }
 
 mmse_resampler_ff_impl::~mmse_resampler_ff_impl() { delete d_resamp; }
--- gnuradio-3.8.0.0/gr-filter/lib/mmse_resampler_cc_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-filter/lib/mmse_resampler_cc_impl.cc	2020-07-30 21:54:49.519549624 +0200
@@ -53,7 +53,7 @@
     set_inverse_relative_rate(d_mu_inc);
     message_port_register_in(pmt::intern("msg_in"));
     set_msg_handler(pmt::intern("msg_in"),
-                    boost::bind(&mmse_resampler_cc_impl::handle_msg, this, _1));
+                    boost::bind(&mmse_resampler_cc_impl::handle_msg, this, boost::placeholders::_1));
 }
 
 mmse_resampler_cc_impl::~mmse_resampler_cc_impl() { delete d_resamp; }
--- gnuradio-3.8.0.0/gr-analog/lib/sig_source_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-analog/lib/sig_source_impl.cc	2020-07-30 22:22:11.068971917 +0200
@@ -67,7 +67,7 @@
     this->set_phase(phase);
     this->message_port_register_in(pmt::mp("freq"));
     this->set_msg_handler(pmt::mp("freq"),
-                          boost::bind(&sig_source_impl<T>::set_frequency_msg, this, _1));
+                          boost::bind(&sig_source_impl<T>::set_frequency_msg, this, boost::placeholders::_1));
 }
 
 template <class T>
--- gnuradio-3.8.0.0/gr-digital/lib/chunks_to_symbols_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-digital/lib/chunks_to_symbols_impl.cc	2020-07-30 22:24:21.095788569 +0200
@@ -54,7 +54,7 @@
     this->set_msg_handler(
         pmt::mp("set_symbol_table"),
         boost::bind(
-            &chunks_to_symbols_impl<IN_T, OUT_T>::handle_set_symbol_table, this, _1));
+            &chunks_to_symbols_impl<IN_T, OUT_T>::handle_set_symbol_table, this, boost::placeholders::_1));
 }
 
 template <class IN_T, class OUT_T>
--- gnuradio-3.8.0.0/gr-digital/lib/constellation_receiver_cb_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-digital/lib/constellation_receiver_cb_impl.cc	2020-07-30 22:28:04.524167819 +0200
@@ -63,12 +63,12 @@
     message_port_register_in(pmt::mp("set_constellation"));
     set_msg_handler(
         pmt::mp("set_constellation"),
-        boost::bind(&constellation_receiver_cb_impl::handle_set_constellation, this, _1));
+        boost::bind(&constellation_receiver_cb_impl::handle_set_constellation, this, boost::placeholders::_1));
 
     message_port_register_in(pmt::mp("rotate_phase"));
     set_msg_handler(
         pmt::mp("rotate_phase"),
-        boost::bind(&constellation_receiver_cb_impl::handle_rotate_phase, this, _1));
+        boost::bind(&constellation_receiver_cb_impl::handle_rotate_phase, this, boost::placeholders::_1));
 }
 
 constellation_receiver_cb_impl::~constellation_receiver_cb_impl() {}
--- gnuradio-3.8.0.0/gr-digital/lib/costas_loop_cc_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-digital/lib/costas_loop_cc_impl.cc	2020-07-30 22:30:35.412077208 +0200
@@ -82,7 +82,7 @@
 
     message_port_register_in(pmt::mp("noise"));
     set_msg_handler(pmt::mp("noise"),
-                    boost::bind(&costas_loop_cc_impl::handle_set_noise, this, _1));
+                    boost::bind(&costas_loop_cc_impl::handle_set_noise, this, boost::placeholders::_1));
 }
 
 costas_loop_cc_impl::~costas_loop_cc_impl() {}
--- gnuradio-3.8.0.0/gr-digital/lib/crc32_async_bb_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-digital/lib/crc32_async_bb_impl.cc	2020-07-31 06:23:29.025293773 +0200
@@ -48,9 +48,9 @@
     message_port_register_out(d_out_port);
 
     if (check)
-        set_msg_handler(d_in_port, boost::bind(&crc32_async_bb_impl::check, this, _1));
+        set_msg_handler(d_in_port, boost::bind(&crc32_async_bb_impl::check, this, boost::placeholders::_1));
     else
-        set_msg_handler(d_in_port, boost::bind(&crc32_async_bb_impl::calc, this, _1));
+        set_msg_handler(d_in_port, boost::bind(&crc32_async_bb_impl::calc, this, boost::placeholders::_1));
 }
 
 crc32_async_bb_impl::~crc32_async_bb_impl() {}
--- gnuradio-3.8.0.0/gr-digital/lib/header_payload_demux_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-digital/lib/header_payload_demux_impl.cc	2020-07-31 06:40:37.305888600 +0200
@@ -152,7 +152,7 @@
     message_port_register_in(msg_port_id());
     set_msg_handler(
         msg_port_id(),
-        boost::bind(&header_payload_demux_impl::parse_header_data_msg, this, _1));
+        boost::bind(&header_payload_demux_impl::parse_header_data_msg, this, boost::placeholders::_1));
     for (size_t i = 0; i < special_tags.size(); i++) {
         d_special_tags.push_back(pmt::string_to_symbol(special_tags[i]));
         d_special_tags_last_value.push_back(pmt::PMT_NIL);
--- gnuradio-3.8.0.0/gr-digital/lib/protocol_formatter_async_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-digital/lib/protocol_formatter_async_impl.cc	2020-07-31 06:58:30.315505541 +0200
@@ -55,7 +55,7 @@
     message_port_register_out(d_pld_port);
 
     set_msg_handler(d_in_port,
-                    boost::bind(&protocol_formatter_async_impl::append, this, _1));
+                    boost::bind(&protocol_formatter_async_impl::append, this, boost::placeholders::_1));
 }
 
 protocol_formatter_async_impl::~protocol_formatter_async_impl() {}
--- gnuradio-3.8.0.0/gr-qtgui/lib/time_sink_c_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/time_sink_c_impl.cc	2020-07-30 22:18:56.578775775 +0200
@@ -79,7 +79,7 @@
 
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
-    set_msg_handler(pmt::mp("in"), boost::bind(&time_sink_c_impl::handle_pdus, this, _1));
+    set_msg_handler(pmt::mp("in"), boost::bind(&time_sink_c_impl::handle_pdus, this, boost::placeholders::_1));
 
     // +2 for the PDU message buffers
     for (unsigned int n = 0; n < d_nconnections + 2; n++) {
--- gnuradio-3.8.0.0/gr-qtgui/lib/time_sink_f_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/time_sink_f_impl.cc	2020-07-31 06:24:17.624509437 +0200
@@ -80,7 +80,7 @@
 
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
-    set_msg_handler(pmt::mp("in"), boost::bind(&time_sink_f_impl::handle_pdus, this, _1));
+    set_msg_handler(pmt::mp("in"), boost::bind(&time_sink_f_impl::handle_pdus, this, boost::placeholders::_1));
 
     // +1 for the PDU buffer
     for (unsigned int n = 0; n < d_nconnections + 1; n++) {
--- gnuradio-3.8.0.0/gr-qtgui/lib/sink_f_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/sink_f_impl.cc	2020-07-31 06:24:57.396595458 +0200
@@ -95,7 +95,7 @@
     // double-clicked
     message_port_register_out(d_port);
     message_port_register_in(d_port);
-    set_msg_handler(d_port, boost::bind(&sink_f_impl::handle_set_freq, this, _1));
+    set_msg_handler(d_port, boost::bind(&sink_f_impl::handle_set_freq, this, boost::placeholders::_1));
 
     d_main_gui = NULL;
 
--- gnuradio-3.8.0.0/gr-qtgui/lib/time_raster_sink_b_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/time_raster_sink_b_impl.cc	2020-07-31 06:27:45.998772669 +0200
@@ -84,7 +84,7 @@
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
     set_msg_handler(pmt::mp("in"),
-                    boost::bind(&time_raster_sink_b_impl::handle_pdus, this, _1));
+                    boost::bind(&time_raster_sink_b_impl::handle_pdus, this, boost::placeholders::_1));
 
     d_scale = 1.0f;
 
--- gnuradio-3.8.0.0/gr-qtgui/lib/time_raster_sink_f_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/time_raster_sink_f_impl.cc	2020-07-31 06:28:21.497301415 +0200
@@ -84,7 +84,7 @@
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
     set_msg_handler(pmt::mp("in"),
-                    boost::bind(&time_raster_sink_f_impl::handle_pdus, this, _1));
+                    boost::bind(&time_raster_sink_f_impl::handle_pdus, this, boost::placeholders::_1));
 
     d_icols = static_cast<int>(ceil(d_cols));
     d_tmpflt = (float*)volk_malloc(d_icols * sizeof(float), volk_get_alignment());
--- gnuradio-3.8.0.0/gr-qtgui/lib/freq_sink_c_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/freq_sink_c_impl.cc	2020-07-31 06:29:00.492680256 +0200
@@ -81,17 +81,17 @@
 
     // setup bw input port
     message_port_register_in(d_port_bw);
-    set_msg_handler(d_port_bw, boost::bind(&freq_sink_c_impl::handle_set_bw, this, _1));
+    set_msg_handler(d_port_bw, boost::bind(&freq_sink_c_impl::handle_set_bw, this, boost::placeholders::_1));
 
     // setup output message port to post frequency when display is
     // double-clicked
     message_port_register_out(d_port);
     message_port_register_in(d_port);
-    set_msg_handler(d_port, boost::bind(&freq_sink_c_impl::handle_set_freq, this, _1));
+    set_msg_handler(d_port, boost::bind(&freq_sink_c_impl::handle_set_freq, this, boost::placeholders::_1));
 
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
-    set_msg_handler(pmt::mp("in"), boost::bind(&freq_sink_c_impl::handle_pdus, this, _1));
+    set_msg_handler(pmt::mp("in"), boost::bind(&freq_sink_c_impl::handle_pdus, this, boost::placeholders::_1));
 
     d_main_gui = NULL;
 
--- gnuradio-3.8.0.0/gr-qtgui/lib/freq_sink_f_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/freq_sink_f_impl.cc	2020-07-31 06:29:42.008191290 +0200
@@ -82,17 +82,17 @@
 
     // setup bw input port
     message_port_register_in(d_port_bw);
-    set_msg_handler(d_port_bw, boost::bind(&freq_sink_f_impl::handle_set_bw, this, _1));
+    set_msg_handler(d_port_bw, boost::bind(&freq_sink_f_impl::handle_set_bw, this, boost::placeholders::_1));
 
     // setup output message port to post frequency when display is
     // double-clicked
     message_port_register_out(d_port);
     message_port_register_in(d_port);
-    set_msg_handler(d_port, boost::bind(&freq_sink_f_impl::handle_set_freq, this, _1));
+    set_msg_handler(d_port, boost::bind(&freq_sink_f_impl::handle_set_freq, this, boost::placeholders::_1));
 
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
-    set_msg_handler(pmt::mp("in"), boost::bind(&freq_sink_f_impl::handle_pdus, this, _1));
+    set_msg_handler(pmt::mp("in"), boost::bind(&freq_sink_f_impl::handle_pdus, this, boost::placeholders::_1));
 
     d_main_gui = NULL;
 
--- gnuradio-3.8.0.0/gr-qtgui/lib/const_sink_c_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/const_sink_c_impl.cc	2020-07-31 06:30:26.163840812 +0200
@@ -70,7 +70,7 @@
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
     set_msg_handler(pmt::mp("in"),
-                    boost::bind(&const_sink_c_impl::handle_pdus, this, _1));
+                    boost::bind(&const_sink_c_impl::handle_pdus, this, boost::placeholders::_1));
 
     for (int i = 0; i < d_nconnections; i++) {
         d_residbufs_real.push_back(
--- gnuradio-3.8.0.0/gr-qtgui/lib/sink_c_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/sink_c_impl.cc	2020-07-31 06:31:05.122550637 +0200
@@ -96,7 +96,7 @@
     // double-clicked
     message_port_register_out(d_port);
     message_port_register_in(d_port);
-    set_msg_handler(d_port, boost::bind(&sink_c_impl::handle_set_freq, this, _1));
+    set_msg_handler(d_port, boost::bind(&sink_c_impl::handle_set_freq, this, boost::placeholders::_1));
 
     d_main_gui = NULL;
 
--- gnuradio-3.8.0.0/gr-qtgui/lib/waterfall_sink_c_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/waterfall_sink_c_impl.cc	2020-07-31 06:31:35.524144831 +0200
@@ -117,19 +117,19 @@
     // setup bw input port
     message_port_register_in(d_port_bw);
     set_msg_handler(d_port_bw,
-                    boost::bind(&waterfall_sink_c_impl::handle_set_bw, this, _1));
+                    boost::bind(&waterfall_sink_c_impl::handle_set_bw, this, boost::placeholders::_1));
 
     // setup output message port to post frequency when display is
     // double-clicked
     message_port_register_out(d_port);
     message_port_register_in(d_port);
     set_msg_handler(d_port,
-                    boost::bind(&waterfall_sink_c_impl::handle_set_freq, this, _1));
+                    boost::bind(&waterfall_sink_c_impl::handle_set_freq, this, boost::placeholders::_1));
 
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
     set_msg_handler(pmt::mp("in"),
-                    boost::bind(&waterfall_sink_c_impl::handle_pdus, this, _1));
+                    boost::bind(&waterfall_sink_c_impl::handle_pdus, this, boost::placeholders::_1));
 }
 
 waterfall_sink_c_impl::~waterfall_sink_c_impl()
--- gnuradio-3.8.0.0/gr-qtgui/lib/histogram_sink_f_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/histogram_sink_f_impl.cc	2020-07-31 06:34:49.240969587 +0200
@@ -82,7 +82,7 @@
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
     set_msg_handler(pmt::mp("in"),
-                    boost::bind(&histogram_sink_f_impl::handle_pdus, this, _1));
+                    boost::bind(&histogram_sink_f_impl::handle_pdus, this, boost::placeholders::_1));
 
     // +1 for the PDU buffer
     for (int i = 0; i < d_nconnections + 1; i++) {
--- gnuradio-3.8.0.0/gr-qtgui/lib/waterfall_sink_f_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/waterfall_sink_f_impl.cc	2020-07-31 06:36:02.938167442 +0200
@@ -116,19 +116,19 @@
     // setup bw input port
     message_port_register_in(d_port_bw);
     set_msg_handler(d_port_bw,
-                    boost::bind(&waterfall_sink_f_impl::handle_set_bw, this, _1));
+                    boost::bind(&waterfall_sink_f_impl::handle_set_bw, this, boost::placeholders::_1));
 
     // setup output message port to post frequency when display is
     // double-clicked
     message_port_register_out(d_port);
     message_port_register_in(d_port);
     set_msg_handler(d_port,
-                    boost::bind(&waterfall_sink_f_impl::handle_set_freq, this, _1));
+                    boost::bind(&waterfall_sink_f_impl::handle_set_freq, this, boost::placeholders::_1));
 
     // setup PDU handling input port
     message_port_register_in(pmt::mp("in"));
     set_msg_handler(pmt::mp("in"),
-                    boost::bind(&waterfall_sink_f_impl::handle_pdus, this, _1));
+                    boost::bind(&waterfall_sink_f_impl::handle_pdus, this, boost::placeholders::_1));
 }
 
 waterfall_sink_f_impl::~waterfall_sink_f_impl()
--- gnuradio-3.8.0.0/gr-qtgui/lib/edit_box_msg_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-qtgui/lib/edit_box_msg_impl.cc	2020-07-31 06:37:00.264506844 +0200
@@ -158,7 +158,7 @@
     message_port_register_out(d_port);
     message_port_register_in(pmt::mp("val"));
 
-    set_msg_handler(pmt::mp("val"), boost::bind(&edit_box_msg_impl::set_value, this, _1));
+    set_msg_handler(pmt::mp("val"), boost::bind(&edit_box_msg_impl::set_value, this, boost::placeholders::_1));
 }
 
 edit_box_msg_impl::~edit_box_msg_impl()
--- gnuradio-3.8.0.0/gr-zeromq/lib/pub_msg_sink_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-zeromq/lib/pub_msg_sink_impl.cc	2020-07-31 07:34:23.895216804 +0200
@@ -55,7 +55,7 @@
     d_socket->bind(address);
 
     message_port_register_in(pmt::mp("in"));
-    set_msg_handler(pmt::mp("in"), boost::bind(&pub_msg_sink_impl::handler, this, _1));
+    set_msg_handler(pmt::mp("in"), boost::bind(&pub_msg_sink_impl::handler, this, boost::placeholders::_1));
 }
 
 pub_msg_sink_impl::~pub_msg_sink_impl()
--- gnuradio-3.8.0.0/gr-zeromq/lib/push_msg_sink_impl.cc.orig	2019-08-09 23:40:34.000000000 +0200
+++ gnuradio-3.8.0.0/gr-zeromq/lib/push_msg_sink_impl.cc	2020-07-31 07:35:24.158380374 +0200
@@ -57,7 +57,7 @@
     d_socket->bind(address);
 
     message_port_register_in(pmt::mp("in"));
-    set_msg_handler(pmt::mp("in"), boost::bind(&push_msg_sink_impl::handler, this, _1));
+    set_msg_handler(pmt::mp("in"), boost::bind(&push_msg_sink_impl::handler, this, boost::placeholders::_1));
 }
 
 push_msg_sink_impl::~push_msg_sink_impl()
